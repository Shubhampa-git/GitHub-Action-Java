name: Java Build and Deploy (Self-Hosted)

on:
  push:
    branches:
      - master  # Trigger on push to the master branch
  pull_request:
    branches:
      - master

jobs:
  build-and-deploy:
    runs-on: self-hosted  # Use your self-hosted server as the runner

    steps:
    # Step 1: Checkout the repository
    - name: Checkout code
      uses: actions/checkout@v3

    # Step 2: Set up Java and Maven (to ensure the environment is correctly prepared)
    - name: Set up Java 11 (or any version your project requires)
      uses: actions/setup-java@v3
      with:
        java-version: '11'  # Specify your Java version (use the version you need)
        distribution: 'adoptopenjdk'  # You can also choose another distribution like 'zulu' or 'openjdk'

    - name: Set up Maven
      uses: actions/setup-java@v3
      with:
        java-version: '11'  # Ensure Java version matches the Maven setup
        maven-version: '3.8.1'  # Specify your Maven version

    # Step 3: Build the project using Maven
    - name: Build with Maven
      run: mvn clean package -DskipTests  # Use -DskipTests if you don't want to run tests during build (optional)

    # Step 4: Deploy the JAR/WAR to Tomcat
    - name: Deploy Application
      run: |
        WAR_FILE=$(find target -name "*.war" | head -n 1)  # Dynamically find the WAR file
        if [ -z "$WAR_FILE" ]; then
          echo "WAR file not found!"
          exit 1
        fi
        echo "Deploying WAR file: $WAR_FILE"
        sudo cp "$WAR_FILE" /opt/tomcat/webapps/  # Copy the WAR file to Tomcat's webapps directory
        sudo /opt/tomcat/bin/shutdown.sh  # Shutdown Tomcat before restarting
        sudo /opt/tomcat/bin/startup.sh   # Restart Tomcat to deploy the WAR
      env:
        TOMCAT_USER: ${{ secrets.TOMCAT_USER }}  # Store sensitive credentials securely using GitHub secrets (optional)
        TOMCAT_PASSWORD: ${{ secrets.TOMCAT_PASSWORD }}  # Optional secret for additional Tomcat security if needed
